// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/rpc/message.proto

/*
	Package rpc is a generated protocol buffer package.

	It is generated from these files:
		pkg/rpc/message.proto

	It has these top-level messages:
		NetworkRequest
		NetworkReply
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkRequest struct {
	K8S_POD_NAME               string `protobuf:"bytes,1,opt,name=K8S_POD_NAME,json=k8SPODNAME,proto3" json:"K8S_POD_NAME,omitempty"`
	K8S_POD_NAMESPACE          string `protobuf:"bytes,2,opt,name=K8S_POD_NAMESPACE,json=k8SPODNAMESPACE,proto3" json:"K8S_POD_NAMESPACE,omitempty"`
	K8S_POD_INFRA_CONTAINER_ID string `protobuf:"bytes,3,opt,name=K8S_POD_INFRA_CONTAINER_ID,json=k8SPODINFRACONTAINERID,proto3" json:"K8S_POD_INFRA_CONTAINER_ID,omitempty"`
	Netns                      string `protobuf:"bytes,4,opt,name=Netns,json=netns,proto3" json:"Netns,omitempty"`
	IfName                     string `protobuf:"bytes,5,opt,name=IfName,json=ifName,proto3" json:"IfName,omitempty"`
}

func (m *NetworkRequest) Reset()                    { *m = NetworkRequest{} }
func (m *NetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkRequest) ProtoMessage()               {}
func (*NetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *NetworkRequest) GetK8S_POD_NAME() string {
	if m != nil {
		return m.K8S_POD_NAME
	}
	return ""
}

func (m *NetworkRequest) GetK8S_POD_NAMESPACE() string {
	if m != nil {
		return m.K8S_POD_NAMESPACE
	}
	return ""
}

func (m *NetworkRequest) GetK8S_POD_INFRA_CONTAINER_ID() string {
	if m != nil {
		return m.K8S_POD_INFRA_CONTAINER_ID
	}
	return ""
}

func (m *NetworkRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *NetworkRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

type NetworkReply struct {
	IPv4Addr      string `protobuf:"bytes,1,opt,name=IPv4Addr,json=iPv4Addr,proto3" json:"IPv4Addr,omitempty"`
	IPv4Subnet    string `protobuf:"bytes,2,opt,name=IPv4Subnet,json=iPv4Subnet,proto3" json:"IPv4Subnet,omitempty"`
	RouteTableNum int32  `protobuf:"varint,3,opt,name=RouteTableNum,json=routeTableNum,proto3" json:"RouteTableNum,omitempty"`
	Exist         bool   `protobuf:"varint,4,opt,name=Exist,json=exist,proto3" json:"Exist,omitempty"`
	GW            string `protobuf:"bytes,5,opt,name=GW,json=gW,proto3" json:"GW,omitempty"`
}

func (m *NetworkReply) Reset()                    { *m = NetworkReply{} }
func (m *NetworkReply) String() string            { return proto.CompactTextString(m) }
func (*NetworkReply) ProtoMessage()               {}
func (*NetworkReply) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *NetworkReply) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *NetworkReply) GetIPv4Subnet() string {
	if m != nil {
		return m.IPv4Subnet
	}
	return ""
}

func (m *NetworkReply) GetRouteTableNum() int32 {
	if m != nil {
		return m.RouteTableNum
	}
	return 0
}

func (m *NetworkReply) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

func (m *NetworkReply) GetGW() string {
	if m != nil {
		return m.GW
	}
	return ""
}

func init() {
	proto.RegisterType((*NetworkRequest)(nil), "rpc.NetworkRequest")
	proto.RegisterType((*NetworkReply)(nil), "rpc.NetworkReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CNIBackend service

type CNIBackendClient interface {
	AddNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkReply, error)
	DelNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkReply, error)
}

type cNIBackendClient struct {
	cc *grpc.ClientConn
}

func NewCNIBackendClient(cc *grpc.ClientConn) CNIBackendClient {
	return &cNIBackendClient{cc}
}

func (c *cNIBackendClient) AddNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkReply, error) {
	out := new(NetworkReply)
	err := grpc.Invoke(ctx, "/rpc.CNIBackend/AddNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIBackendClient) DelNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkReply, error) {
	out := new(NetworkReply)
	err := grpc.Invoke(ctx, "/rpc.CNIBackend/DelNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CNIBackend service

type CNIBackendServer interface {
	AddNetwork(context.Context, *NetworkRequest) (*NetworkReply, error)
	DelNetwork(context.Context, *NetworkRequest) (*NetworkReply, error)
}

func RegisterCNIBackendServer(s *grpc.Server, srv CNIBackendServer) {
	s.RegisterService(&_CNIBackend_serviceDesc, srv)
}

func _CNIBackend_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).AddNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIBackend_DelNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).DelNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/DelNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).DelNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNIBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.CNIBackend",
	HandlerType: (*CNIBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNetwork",
			Handler:    _CNIBackend_AddNetwork_Handler,
		},
		{
			MethodName: "DelNetwork",
			Handler:    _CNIBackend_DelNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rpc/message.proto",
}

func (m *NetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.K8S_POD_NAME) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.K8S_POD_NAME)))
		i += copy(dAtA[i:], m.K8S_POD_NAME)
	}
	if len(m.K8S_POD_NAMESPACE) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.K8S_POD_NAMESPACE)))
		i += copy(dAtA[i:], m.K8S_POD_NAMESPACE)
	}
	if len(m.K8S_POD_INFRA_CONTAINER_ID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.K8S_POD_INFRA_CONTAINER_ID)))
		i += copy(dAtA[i:], m.K8S_POD_INFRA_CONTAINER_ID)
	}
	if len(m.Netns) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Netns)))
		i += copy(dAtA[i:], m.Netns)
	}
	if len(m.IfName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IfName)))
		i += copy(dAtA[i:], m.IfName)
	}
	return i, nil
}

func (m *NetworkReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IPv4Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IPv4Addr)))
		i += copy(dAtA[i:], m.IPv4Addr)
	}
	if len(m.IPv4Subnet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IPv4Subnet)))
		i += copy(dAtA[i:], m.IPv4Subnet)
	}
	if m.RouteTableNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.RouteTableNum))
	}
	if m.Exist {
		dAtA[i] = 0x20
		i++
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.GW) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GW)))
		i += copy(dAtA[i:], m.GW)
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NetworkRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.K8S_POD_NAME)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.K8S_POD_NAMESPACE)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.K8S_POD_INFRA_CONTAINER_ID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Netns)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.IfName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *NetworkReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.IPv4Addr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.IPv4Subnet)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RouteTableNum != 0 {
		n += 1 + sovMessage(uint64(m.RouteTableNum))
	}
	if m.Exist {
		n += 2
	}
	l = len(m.GW)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8S_POD_NAME", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8S_POD_NAME = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8S_POD_NAMESPACE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8S_POD_NAMESPACE = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8S_POD_INFRA_CONTAINER_ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8S_POD_INFRA_CONTAINER_ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Netns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableNum", wireType)
			}
			m.RouteTableNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GW", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GW = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pkg/rpc/message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcd, 0x6a, 0xe2, 0x50,
	0x14, 0xc7, 0x8d, 0x4e, 0xc4, 0x39, 0xa8, 0x33, 0xde, 0x99, 0x4a, 0x70, 0x11, 0x44, 0xba, 0x28,
	0x5d, 0x28, 0xb4, 0xa5, 0x48, 0x77, 0xd1, 0xa4, 0x25, 0x94, 0x5e, 0x43, 0x22, 0xb8, 0x0c, 0x31,
	0xb9, 0x95, 0x90, 0x98, 0xa4, 0x37, 0x37, 0x6d, 0x85, 0x3e, 0x47, 0xe9, 0x23, 0xb9, 0xec, 0x23,
	0x14, 0xfb, 0x22, 0x25, 0xb7, 0xa9, 0xd5, 0x65, 0x97, 0xff, 0x2f, 0xf8, 0x1d, 0x0e, 0x1c, 0x24,
	0xc1, 0x62, 0x40, 0x13, 0x77, 0xb0, 0x24, 0x69, 0xea, 0x2c, 0x48, 0x3f, 0xa1, 0x31, 0x8b, 0x51,
	0x85, 0x26, 0x6e, 0x6f, 0x2d, 0x40, 0x13, 0x13, 0xf6, 0x10, 0xd3, 0xc0, 0x24, 0x77, 0x19, 0x49,
	0x19, 0xea, 0x42, 0xfd, 0x7a, 0x68, 0xd9, 0xc6, 0x44, 0xb5, 0xb1, 0x72, 0xa3, 0x49, 0x42, 0x57,
	0x38, 0xfa, 0x6d, 0x42, 0x30, 0xb4, 0x8c, 0x89, 0x9a, 0x3b, 0xe8, 0x18, 0x5a, 0xbb, 0x0d, 0xcb,
	0x50, 0xc6, 0x9a, 0x54, 0xe6, 0xb5, 0x3f, 0xdf, 0x35, 0x6e, 0xa3, 0x0b, 0xe8, 0x7c, 0x75, 0x75,
	0x7c, 0x69, 0x2a, 0xf6, 0x78, 0x82, 0xa7, 0x8a, 0x8e, 0x35, 0xd3, 0xd6, 0x55, 0xa9, 0xc2, 0x47,
	0xed, 0xcf, 0x11, 0xcf, 0xb7, 0xb1, 0xae, 0xa2, 0xff, 0x20, 0x62, 0xc2, 0xa2, 0x54, 0xfa, 0xc5,
	0x6b, 0x62, 0x94, 0x0b, 0xd4, 0x86, 0xaa, 0x7e, 0x8b, 0x9d, 0x25, 0x91, 0x44, 0x6e, 0x57, 0x7d,
	0xae, 0x7a, 0xcf, 0x02, 0xd4, 0xb7, 0xa7, 0x24, 0xe1, 0x0a, 0x75, 0xa0, 0xa6, 0x1b, 0xf7, 0x67,
	0x8a, 0xe7, 0xd1, 0xe2, 0x88, 0x9a, 0x5f, 0x68, 0x24, 0x03, 0xe4, 0x99, 0x95, 0xcd, 0x23, 0xc2,
	0x0a, 0x76, 0xf0, 0xb7, 0x0e, 0x3a, 0x84, 0x86, 0x19, 0x67, 0x8c, 0x4c, 0x9d, 0x79, 0x48, 0x70,
	0xb6, 0xe4, 0xa4, 0xa2, 0xd9, 0xa0, 0xbb, 0x66, 0x0e, 0xa8, 0x3d, 0xfa, 0x29, 0xe3, 0x80, 0x35,
	0x53, 0x24, 0xb9, 0x40, 0x4d, 0x28, 0x5f, 0xcd, 0x0a, 0xb8, 0xf2, 0x62, 0x76, 0xf2, 0x04, 0x30,
	0xc6, 0xfa, 0xc8, 0x71, 0x03, 0x12, 0x79, 0xe8, 0x1c, 0x40, 0xf1, 0xbc, 0x02, 0x14, 0xfd, 0xeb,
	0xd3, 0xc4, 0xed, 0xef, 0x7f, 0xa0, 0xd3, 0xda, 0x37, 0x93, 0x70, 0xd5, 0x2b, 0xe5, 0x3b, 0x95,
	0x84, 0x3f, 0xde, 0x8d, 0xfe, 0xae, 0x37, 0xb2, 0xf0, 0xba, 0x91, 0x85, 0xb7, 0x8d, 0x2c, 0xbc,
	0xbc, 0xcb, 0xa5, 0x79, 0x95, 0xff, 0xff, 0xf4, 0x23, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x89, 0xa3,
	0xe7, 0x18, 0x02, 0x00, 0x00,
}
